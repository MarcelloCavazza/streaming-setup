@using Models
@using Models.InnerService.Responses
@using Models.InnerService.Responses.Queues
@using Models.InnerService.Responses.Tasks
@using Models.InnerService.Responses.Trigger
@using System.Text.Json
@inject HttpClient Http

@page "/"

<PageTitle>Home</PageTitle>

<h1>Mongol History in Brazilian Portuguese</h1>

<p><em>RequestStatus: @RequestStatus</em></p>

<br>

@if(CanStartRequest)
{
    <div>
        <button style="background-color: rgb(0, 255, 0)  ; color: red;" onclick="@(async () => await StartRequestAsync())">
        Start Request
        </button>
    </div>
}
else
{
    <div>
        <button style="background-color: red; color: white;" onclick="@(async () => await CancelRequestAsync())">
            Cancel Request
        </button>
    </div>
}
<br>

@if (!CanStartRequest && (mongolHistory == string.Empty || requestAgain || queueId == Guid.Empty))
{
    <p><em>Loading...</em></p>
}

<br>


<div>@mongolHistory</div>

@code {

    private bool CanStartRequest = true;

    private string mongolHistory = string.Empty;

    private bool requestAgain = false;

    private Guid queueId = Guid.Empty;

    private string RequestStatus = "Not Made";

    private const string API_URL = "http://localhost:5051";

    public async Task StartRequestAsync()
    {
        CanStartRequest = false;
        mongolHistory = string.Empty;

        await Task.Delay(2000);

        var responseMessage = await Http.GetAsync($"{API_URL}/trigger");

        responseMessage.EnsureSuccessStatusCode();

        var responseAsString = await responseMessage.Content.ReadAsStringAsync();

        var responseAsObject = JsonSerializer.Deserialize<TriggerResponse>(responseAsString);

        if (responseAsObject != null)
        {
            queueId = responseAsObject.Id;

            do{
                await RetrieveTaskStatusAsync();

                if (queueId != Guid.Empty)
                {
                    var innerServiceResponse = await Http.GetAsync($"{API_URL}/queues/{queueId}");

                    if (!innerServiceResponse.IsSuccessStatusCode)
                    {
                        break;
                    }

                    innerServiceResponse.EnsureSuccessStatusCode();

                    var innerServiceResponseString = await innerServiceResponse.Content.ReadAsStringAsync();

                    var innerServiceResponseAsObject = JsonSerializer.Deserialize<QueueContent>(innerServiceResponseString);


                    if (innerServiceResponseAsObject != null)
                    {
                        requestAgain = innerServiceResponseAsObject.FetchMore;

                        mongolHistory += innerServiceResponseAsObject.Content;

                        queueId = innerServiceResponseAsObject.QueueId;
                        
                        StateHasChanged();
                    }
                }
            }while(requestAgain);
        }

    }

    private async Task RetrieveTaskStatusAsync()
    {
        var requestTaskStatusResponse = await Http.GetAsync($"{API_URL}/tasks/{queueId}");

        requestTaskStatusResponse.EnsureSuccessStatusCode();

        var responseAsString = await requestTaskStatusResponse.Content.ReadAsStringAsync();

        var responseAsObject = JsonSerializer.Deserialize<TaskStatusResponse>(responseAsString);

        RequestStatus = responseAsObject!.Status.ToString();
    }

    public async Task CancelRequestAsync()
    {
        requestAgain = false;
        
        CanStartRequest = true;
        
        await Http.DeleteAsync($"{API_URL}/tasks/{queueId}");

        await RetrieveTaskStatusAsync();

        queueId = Guid.Empty;
    }
}
